{
    "java": [
        {
            "q": "What is Java?",
            "a": "Java is a high-level, object-oriented programming language developed by Sun Microsystems."
        },
        {
            "q": "What are the features of Java?",
            "a": "Platform independence, Object-oriented, Robust, Secure, Multithreaded, High performance, etc."
        },
        {
            "q": "What is JVM?",
            "a": "JVM (Java Virtual Machine) is an engine that provides a runtime environment to execute Java bytecode."
        },
        {
            "q": "What is JDK?",
            "a": "JDK (Java Development Kit) is a software development kit used to develop Java applications."
        },
        {
            "q": "What is JRE?",
            "a": "JRE (Java Runtime Environment) provides the libraries and JVM required to run Java applications."
        },
        {
            "q": "What is the difference between JDK, JRE, and JVM?",
            "a": "JDK includes JRE + development tools. JRE provides JVM + libraries to run Java programs. JVM executes Java bytecode."
        },
        {
            "q": "What are the four OOP principles?",
            "a": "Encapsulation, Inheritance, Polymorphism, and Abstraction."
        },
        {
            "q": "What is method overloading?",
            "a": "Method overloading allows multiple methods in a class with the same name but different parameters."
        },
        {
            "q": "What is method overriding?",
            "a": "Method overriding allows a subclass to provide a specific implementation of a method already defined in its superclass."
        },
        {
            "q": "What is the difference between static and non-static methods?",
            "a": "Static methods belong to the class, while non-static methods belong to instances of the class."
        },
        {
            "q": "What is the 'final' keyword in Java?",
            "a": "'final' is used to declare constants, prevent method overriding, and prevent class inheritance."
        },
        {
            "q": "What is an abstract class in Java?",
            "a": "An abstract class cannot be instantiated and may contain abstract methods."
        },
        {
            "q": "What is an interface in Java?",
            "a": "An interface defines a contract that classes must implement, containing abstract methods."
        },
        {
            "q": "What is the difference between an abstract class and an interface?",
            "a": "Abstract classes can have constructors and method implementations, while interfaces contain only abstract methods (before Java 8)."
        },
        {
            "q": "What is the difference between == and .equals()?",
            "a": "'==' compares memory references, while '.equals()' compares values."
        },
        {
            "q": "What is a constructor in Java?",
            "a": "A constructor is a special method used to initialize objects when they are created."
        },
        {
            "q": "What is garbage collection in Java?",
            "a": "Garbage collection automatically removes unused objects from memory to free space."
        },
        {
            "q": "What are checked and unchecked exceptions?",
            "a": "Checked exceptions are checked at compile time (e.g., IOException), while unchecked exceptions occur at runtime (e.g., NullPointerException)."
        },
        {
            "q": "What is the difference between 'throw' and 'throws'?",
            "a": "'throw' is used to explicitly throw an exception, while 'throws' declares exceptions that a method can throw."
        },
        {
            "q": "What is multithreading in Java?",
            "a": "Multithreading allows multiple threads to run concurrently for efficient performance."
        },
        {
            "q": "How do you create a thread in Java?",
            "a": "By extending the Thread class or implementing the Runnable interface."
        },
        {
            "q": "What is synchronization in Java?",
            "a": "Synchronization prevents multiple threads from accessing a shared resource at the same time."
        },
        {
            "q": "What is a deadlock in Java?",
            "a": "A deadlock occurs when two or more threads are waiting for each other to release a lock, preventing execution."
        },
        {
            "q": "What are Java Collections?",
            "a": "Java Collections is a framework that provides reusable data structures like List, Set, and Map."
        },
        {
            "q": "What is the difference between ArrayList and LinkedList?",
            "a": "ArrayList provides fast random access, while LinkedList provides fast insertions and deletions."
        },
        {
            "q": "What is a HashMap in Java?",
            "a": "HashMap is a data structure that stores key-value pairs and allows fast lookups."
        },
        {
            "q": "What is the difference between HashMap and HashTable?",
            "a": "HashMap is not synchronized, while HashTable is synchronized and thread-safe."
        },
        {
            "q": "What is a lambda expression in Java?",
            "a": "A lambda expression is a concise way to represent an anonymous function introduced in Java 8."
        },
        {
            "q": "What is functional programming in Java?",
            "a": "Functional programming treats computation as the evaluation of mathematical functions."
        },
        {
            "q": "What is Stream API in Java?",
            "a": "Stream API allows processing collections of data in a functional style, introduced in Java 8."
        },
        {
            "q": "What is Optional in Java?",
            "a": "Optional is a container object that may or may not contain a non-null value."
        },
        {
            "q": "What is a Singleton class?",
            "a": "A Singleton class ensures only one instance exists in the JVM."
        },
        {
            "q": "What is dependency injection?",
            "a": "Dependency injection is a design pattern that allows objects to be injected rather than instantiated inside a class."
        }
    ],

    "python": [
        {
            "q": "What is Python?",
            "a": "Python is a high-level, interpreted programming language known for its readability and simplicity."
        },
        {
            "q": "What are Python's key features?",
            "a": "Interpreted, Dynamically Typed, High-Level, Extensive Libraries, and Object-Oriented."
        },
        {
            "q": "What is PEP 8?",
            "a": "PEP 8 is a style guide for writing clean and readable Python code."
        },
        {
            "q": "What is the difference between lists and tuples?",
            "a": "Lists are mutable, whereas tuples are immutable."
        },
        {
            "q": "What are Python's data types?",
            "a": "int, float, str, list, tuple, dict, set, bool, etc."
        },
        {
            "q": "What is the difference between Python 2 and Python 3?",
            "a": "Python 3 introduced improvements like better Unicode support, new syntax, and `print()` as a function."
        },
        {
            "q": "What are Python's built-in data structures?",
            "a": "Lists, Tuples, Sets, and Dictionaries."
        },
        {
            "q": "What is a Python dictionary?",
            "a": "A dictionary is a collection of key-value pairs, allowing fast lookups."
        },
        {
            "q": "What is list comprehension in Python?",
            "a": "A concise way to create lists using a single line of code."
        },
        {
            "q": "What is the difference between shallow copy and deep copy?",
            "a": "A shallow copy copies references, while a deep copy creates new objects."
        },
        {
            "q": "What are Python functions?",
            "a": "Functions are reusable blocks of code that perform a specific task."
        },
        {
            "q": "What is lambda in Python?",
            "a": "A lambda function is an anonymous function defined using the `lambda` keyword."
        },
        {
            "q": "What is the difference between `is` and `==`?",
            "a": "`is` compares object identity, while `==` compares values."
        },
        {
            "q": "What is Python's `None` type?",
            "a": "`None` represents the absence of a value."
        },
        {
            "q": "What is exception handling in Python?",
            "a": "Exception handling prevents program crashes using `try`, `except`, `finally` blocks."
        },
        {
            "q": "What is the difference between `raise` and `assert`?",
            "a": "`raise` manually triggers an exception, while `assert` is used for debugging."
        },
        {
            "q": "What is Python's `with` statement?",
            "a": "The `with` statement simplifies file handling by ensuring automatic cleanup."
        },
        {
            "q": "What are Python modules and packages?",
            "a": "A module is a single Python file, while a package is a collection of modules."
        },
        {
            "q": "What is the difference between `import` and `from ... import`?",
            "a": "`import` loads an entire module, while `from ... import` loads specific parts."
        },
        {
            "q": "What is object-oriented programming (OOP) in Python?",
            "a": "OOP allows organizing code using classes and objects."
        },
        {
            "q": "What are the key OOP concepts in Python?",
            "a": "Encapsulation, Inheritance, Polymorphism, and Abstraction."
        },
        {
            "q": "What is `self` in Python classes?",
            "a": "`self` refers to the instance of a class and is used to access instance attributes."
        },
        {
            "q": "What is the difference between `@staticmethod` and `@classmethod`?",
            "a": "`@staticmethod` does not use `self`, while `@classmethod` takes `cls` as the first argument."
        },
        {
            "q": "What is multiple inheritance in Python?",
            "a": "Multiple inheritance allows a class to inherit from more than one parent class."
        },
        {
            "q": "What is Python's garbage collection?",
            "a": "Garbage collection automatically reclaims memory of unused objects."
        },
        {
            "q": "What are Python's memory management techniques?",
            "a": "Reference counting, garbage collection, and memory pooling."
        },
        {
            "q": "What are Python decorators?",
            "a": "Decorators are functions that modify other functions without changing their code."
        },
        {
            "q": "What are Python generators?",
            "a": "Generators use `yield` to create iterators that save state and resume execution."
        },
        {
            "q": "What is the difference between `iter()` and `next()`?",
            "a": "`iter()` returns an iterator, while `next()` retrieves the next element."
        },
        {
            "q": "What is threading in Python?",
            "a": "Threading allows running multiple tasks concurrently."
        },
        {
            "q": "What is the Global Interpreter Lock (GIL)?",
            "a": "GIL prevents multiple native threads from executing Python bytecode simultaneously."
        },
        {
            "q": "What is the difference between threading and multiprocessing?",
            "a": "Threading runs tasks in the same process, while multiprocessing runs them in separate processes."
        },
        {
            "q": "What are Python's file handling methods?",
            "a": "Python uses `open()`, `read()`, `write()`, and `close()` for file handling."
        },
        {
            "q": "What is the difference between `rb`, `wb`, and `r+` in file handling?",
            "a": "`rb` reads binary files, `wb` writes binary files, and `r+` reads and writes."
        },
        {
            "q": "What are Python's built-in functions?",
            "a": "`len()`, `max()`, `min()`, `sum()`, `sorted()`, `type()`, `isinstance()`, etc."
        },
        {
            "q": "What are f-strings in Python?",
            "a": "F-strings (formatted strings) allow embedding expressions inside string literals using `{}`."
        },
        {
            "q": "What is the difference between `map()`, `filter()`, and `reduce()`?",
            "a": "`map()` applies a function to all items, `filter()` selects specific items, `reduce()` accumulates values."
        },
        {
            "q": "What is `zip()` in Python?",
            "a": "`zip()` combines multiple iterables into a single iterable of tuples."
        },
        {
            "q": "What is the difference between `deepcopy()` and `copy()`?",
            "a": "`copy()` creates a shallow copy, while `deepcopy()` creates a full duplicate."
        },
        {
            "q": "What is `async` and `await` in Python?",
            "a": "`async` defines asynchronous functions, while `await` waits for asynchronous tasks to complete."
        },
        {
            "q": "What is Python's `virtualenv`?",
            "a": "`virtualenv` creates isolated Python environments to manage dependencies."
        },
        {
            "q": "What is Flask?",
            "a": "Flask is a lightweight web framework for building Python applications."
        },
        {
            "q": "What is Django?",
            "a": "Django is a high-level Python web framework that follows the MVT architecture."
        }
    ],


    "cpp": [
        {
            "q": "What is C++?",
            "a": "C++ is a general-purpose, object-oriented programming language developed by Bjarne Stroustrup."
        },
        {
            "q": "What are the features of C++?",
            "a": "Object-oriented, fast execution, memory management, and high performance."
        },
        {
            "q": "What is the difference between C and C++?",
            "a": "C is a procedural programming language, while C++ supports both procedural and object-oriented programming."
        },
        {
            "q": "What is an object in C++?",
            "a": "An object is an instance of a class."
        },
        {
            "q": "What is encapsulation?",
            "a": "Encapsulation is bundling data and functions that operate on that data into a single unit called a class."
        },
        {
            "q": "What is polymorphism in C++?",
            "a": "Polymorphism allows methods to have different implementations depending on the object that calls them."
        },
        {
            "q": "What are the different types of polymorphism?",
            "a": "Compile-time polymorphism (function overloading, operator overloading) and runtime polymorphism (method overriding using virtual functions)."
        },
        {
            "q": "What is an abstract class?",
            "a": "An abstract class is a class that cannot be instantiated and may contain pure virtual functions."
        },
        {
            "q": "What is the difference between an abstract class and an interface?",
            "a": "Abstract classes can have both concrete and pure virtual functions, while interfaces (in C++ via pure virtual classes) only contain pure virtual functions."
        },
        {
            "q": "What is a virtual function?",
            "a": "A virtual function is a member function declared in a base class that can be overridden by derived classes."
        },
        {
            "q": "What is a constructor in C++?",
            "a": "A constructor is a special member function that initializes an object when it is created."
        },
        {
            "q": "What are the types of constructors in C++?",
            "a": "Default constructor, Parameterized constructor, Copy constructor, and Move constructor."
        },
        {
            "q": "What is the difference between a shallow copy and a deep copy?",
            "a": "A shallow copy copies only the memory addresses, while a deep copy creates a new copy of the entire object."
        },
        {
            "q": "What is operator overloading?",
            "a": "Operator overloading allows defining new meanings for existing operators for user-defined types."
        },
        {
            "q": "What is function overloading?",
            "a": "Function overloading allows multiple functions with the same name but different parameters."
        },
        {
            "q": "What is function overriding?",
            "a": "Function overriding allows a derived class to provide a new implementation of a base class function."
        },
        {
            "q": "What is inheritance in C++?",
            "a": "Inheritance allows a class (child) to acquire the properties and behaviors of another class (parent)."
        },
        {
            "q": "What are the types of inheritance in C++?",
            "a": "Single inheritance, Multiple inheritance, Multilevel inheritance, Hierarchical inheritance, and Hybrid inheritance."
        },
        {
            "q": "What is multiple inheritance?",
            "a": "Multiple inheritance allows a class to inherit from more than one base class."
        },
        {
            "q": "What is the Diamond Problem in multiple inheritance?",
            "a": "The Diamond Problem occurs when a derived class inherits from two classes that both inherit from the same base class, causing ambiguity."
        },
        {
            "q": "What is a friend function in C++?",
            "a": "A friend function is a function that is not a member of a class but has access to its private and protected members."
        },
        {
            "q": "What is static in C++?",
            "a": "The `static` keyword allows variables or functions to retain their values across multiple function calls or objects."
        },
        {
            "q": "What is a reference variable?",
            "a": "A reference variable is an alias for another variable and is declared using `&`."
        },
        {
            "q": "What is the difference between `new` and `malloc()`?",
            "a": "`new` is a C++ operator that calls the constructor, while `malloc()` is a C function that only allocates raw memory."
        },
        {
            "q": "What is smart pointer in C++?",
            "a": "Smart pointers (`unique_ptr`, `shared_ptr`, `weak_ptr`) help manage dynamic memory automatically."
        },
        {
            "q": "What is STL in C++?",
            "a": "STL (Standard Template Library) is a collection of template-based classes and functions for data structures and algorithms."
        },
        {
            "q": "What are the main components of STL?",
            "a": "Containers, Iterators, Algorithms, and Function Objects."
        },
        {
            "q": "What are the different types of containers in STL?",
            "a": "Sequence containers (vector, list, deque), Associative containers (map, set, multimap, multiset), and Unordered containers (unordered_map, unordered_set)."
        },
        {
            "q": "What is the difference between vector and list in C++?",
            "a": "`vector` is a dynamic array with fast random access, while `list` is a doubly linked list with efficient insertions and deletions."
        },
        {
            "q": "What are lambda expressions in C++?",
            "a": "Lambda expressions allow defining anonymous functions inline."
        },
        {
            "q": "What is `constexpr` in C++11?",
            "a": "`constexpr` allows computing values at compile time for performance optimization."
        },
        {
            "q": "What is the difference between `auto` and `decltype`?",
            "a": "`auto` deduces the type of a variable at compile-time, while `decltype` determines the type of an expression."
        },
        {
            "q": "What are rvalue references in C++11?",
            "a": "Rvalue references (`&&`) enable move semantics to optimize performance."
        },
        {
            "q": "What is move constructor in C++?",
            "a": "A move constructor transfers ownership of resources instead of copying them."
        },
        {
            "q": "What is perfect forwarding in C++?",
            "a": "Perfect forwarding allows functions to forward arguments while preserving their types using `std::forward`."
        },
        {
            "q": "What is `std::variant` in C++17?",
            "a": "`std::variant` is a type-safe alternative to `union`."
        },
        {
            "q": "What is `std::optional` in C++17?",
            "a": "`std::optional` represents optional values that may or may not be present."
        },
        {
            "q": "What are concepts in C++20?",
            "a": "Concepts provide compile-time constraints for template parameters to improve readability and error checking."
        },
        {
            "q": "What is coroutine in C++20?",
            "a": "Coroutines allow functions to suspend execution and resume later, improving asynchronous programming."
        },
        {
            "q": "What is `std::span` in C++20?",
            "a": "`std::span` is a view over a contiguous sequence of elements without copying data."
        }
    ],

    "csharp": [
        {
            "q": "What is C#?",
            "a": "C# is an object-oriented programming language developed by Microsoft as part of the .NET ecosystem."
        },
        {
            "q": "What is the .NET framework?",
            "a": ".NET is a software framework used to build applications that run on Windows, providing libraries and runtime support."
        },
        {
            "q": "What are the key features of C#?",
            "a": "Strong typing, object-oriented, garbage collection, exception handling, and interoperability with .NET."
        },
        {
            "q": "What is the difference between a struct and a class?",
            "a": "A struct is a value type, while a class is a reference type."
        },
        {
            "q": "What is an interface in C#?",
            "a": "An interface is a contract that defines a set of methods and properties a class must implement."
        },
        {
            "q": "What is an abstract class?",
            "a": "An abstract class cannot be instantiated and may contain abstract methods that must be implemented by derived classes."
        },
        {
            "q": "What is the difference between an abstract class and an interface?",
            "a": "An abstract class can have fields and concrete methods, while an interface only defines method signatures."
        },
        {
            "q": "What is polymorphism?",
            "a": "Polymorphism allows methods to have different implementations based on the object that calls them."
        },
        {
            "q": "What are the types of polymorphism in C#?",
            "a": "Compile-time polymorphism (method overloading, operator overloading) and runtime polymorphism (method overriding using virtual methods)."
        },
        {
            "q": "What is encapsulation?",
            "a": "Encapsulation is the concept of restricting direct access to an object's data and only exposing necessary parts via methods."
        },
        {
            "q": "What is inheritance?",
            "a": "Inheritance allows a class to derive properties and behavior from another class."
        },
        {
            "q": "What is the difference between `override`, `new`, and `virtual`?",
            "a": "`virtual` allows method overriding, `override` is used in derived classes, and `new` hides a base class method."
        },
        {
            "q": "What is a sealed class?",
            "a": "A sealed class cannot be inherited."
        },
        {
            "q": "What is the difference between `readonly` and `const`?",
            "a": "`const` is a compile-time constant, while `readonly` is assigned at runtime."
        },
        {
            "q": "What is the difference between `ref` and `out`?",
            "a": "`ref` requires initialization before passing, while `out` does not."
        },
        {
            "q": "What is a delegate in C#?",
            "a": "A delegate is a type that holds references to methods, enabling event-driven programming."
        },
        {
            "q": "What are events in C#?",
            "a": "Events provide a way to subscribe and respond to changes, often using delegates."
        },
        {
            "q": "What is the difference between synchronous and asynchronous programming?",
            "a": "Synchronous execution blocks until a task completes, while asynchronous execution allows other operations to continue."
        },
        {
            "q": "What are `async` and `await` in C#?",
            "a": "`async` marks a method for asynchronous execution, and `await` pauses execution until a task completes."
        },
        {
            "q": "What is a lambda expression?",
            "a": "A lambda expression is an anonymous function that can have parameters and a body, often used in LINQ."
        },
        {
            "q": "What is LINQ?",
            "a": "LINQ (Language Integrated Query) allows querying collections using C# syntax."
        },
        {
            "q": "What is the difference between `IEnumerable` and `IQueryable`?",
            "a": "`IEnumerable` works in-memory, while `IQueryable` executes queries in a database or remote source."
        },
        {
            "q": "What is garbage collection in C#?",
            "a": "Garbage collection automatically frees unused memory to optimize performance."
        },
        {
            "q": "What is a destructor in C#?",
            "a": "A destructor is a method used to clean up resources when an object is destroyed."
        },
        {
            "q": "What is the `IDisposable` interface?",
            "a": "`IDisposable` provides a `Dispose` method to manually release resources."
        },
        {
            "q": "What is a nullable type in C#?",
            "a": "A nullable type (`int?`, `double?`) allows assigning `null` to value types."
        },
        {
            "q": "What is `var` in C#?",
            "a": "`var` allows implicit type inference at compile time."
        },
        {
            "q": "What is `dynamic` in C#?",
            "a": "`dynamic` allows runtime type resolution, unlike `var` which is resolved at compile time."
        },
        {
            "q": "What is a thread in C#?",
            "a": "A thread is a unit of execution that allows parallel execution of tasks."
        },
        {
            "q": "What is the difference between `Task` and `Thread`?",
            "a": "`Task` is part of the Task Parallel Library (TPL) and is optimized for async programming, while `Thread` is lower-level."
        },
        {
            "q": "What is the difference between `lock`, `Mutex`, and `Semaphore`?",
            "a": "`lock` ensures thread safety within a process, `Mutex` works across processes, and `Semaphore` allows limited concurrent access."
        },
        {
            "q": "What is dependency injection in C#?",
            "a": "Dependency injection (DI) is a design pattern that provides objects their dependencies instead of creating them directly."
        },
        {
            "q": "What is ASP.NET Core?",
            "a": "ASP.NET Core is a cross-platform framework for building modern web applications."
        },
        {
            "q": "What is middleware in ASP.NET Core?",
            "a": "Middleware is software that processes requests and responses in the ASP.NET Core request pipeline."
        },
        {
            "q": "What is the difference between `appsettings.json` and `web.config`?",
            "a": "`appsettings.json` is used in ASP.NET Core for configuration, replacing `web.config` from earlier .NET versions."
        },
        {
            "q": "What is Entity Framework Core?",
            "a": "Entity Framework Core (EF Core) is an ORM for working with databases using C#."
        },
        {
            "q": "What are the different types of collections in C#?",
            "a": "Arrays, Lists, Dictionaries, HashSets, Queues, and Stacks."
        },
        {
            "q": "What is `yield` in C#?",
            "a": "`yield` enables lazy iteration in enumerators."
        },
        {
            "q": "What is `Span<T>` in C#?",
            "a": "`Span<T>` allows working with slices of arrays and memory buffers efficiently."
        },
        {
            "q": "What is `record` in C#?",
            "a": "`record` is a new type introduced in C# 9 for immutable data models."
        }
    ],


    "c": [
        {
            "q": "What is C?",
            "a": "C is a general-purpose, procedural programming language developed by Dennis Ritchie."
        },
        {
            "q": "What are the features of C?",
            "a": "Fast execution, portability, modularity, low-level access, and structured programming."
        },
        {
            "q": "What is the difference between C and C++?",
            "a": "C is a procedural language, while C++ supports object-oriented programming."
        },
        {
            "q": "What is a pointer in C?",
            "a": "A pointer is a variable that stores the memory address of another variable."
        },
        {
            "q": "What is a NULL pointer?",
            "a": "A NULL pointer is a pointer that does not point to any memory location."
        },
        {
            "q": "What is pointer arithmetic in C?",
            "a": "Pointer arithmetic involves operations like addition, subtraction, and comparison on pointer values."
        },
        {
            "q": "What is dynamic memory allocation?",
            "a": "Dynamic memory allocation allows allocating memory at runtime using `malloc()`, `calloc()`, `realloc()`, and `free()`."
        },
        {
            "q": "What is the difference between `malloc()` and `calloc()`?",
            "a": "`malloc()` allocates uninitialized memory, while `calloc()` allocates zero-initialized memory."
        },
        {
            "q": "What is `free()` in C?",
            "a": "The `free()` function deallocates dynamically allocated memory."
        },
        {
            "q": "What is a function in C?",
            "a": "A function is a block of code that performs a specific task and can be reused."
        },
        {
            "q": "What is recursion in C?",
            "a": "Recursion is a function calling itself to solve smaller subproblems of a larger problem."
        },
        {
            "q": "What is the difference between call by value and call by reference?",
            "a": "Call by value passes a copy of the argument, while call by reference passes the address, modifying the original value."
        },
        {
            "q": "What is a structure in C?",
            "a": "A structure is a user-defined data type that groups related variables of different types."
        },
        {
            "q": "What is the difference between a structure and a union?",
            "a": "A structure allocates memory for all members, while a union shares memory among members."
        },
        {
            "q": "What is an array in C?",
            "a": "An array is a collection of elements of the same data type stored in contiguous memory locations."
        },
        {
            "q": "What is the difference between an array and a pointer?",
            "a": "An array stores values, while a pointer stores the address of a value."
        },
        {
            "q": "What is a file in C?",
            "a": "A file is a storage location on disk used to store data permanently."
        },
        {
            "q": "What are the file handling functions in C?",
            "a": "`fopen()`, `fclose()`, `fread()`, `fwrite()`, `fprintf()`, `fscanf()`."
        },
        {
            "q": "What is the difference between text and binary files?",
            "a": "Text files store characters, while binary files store data in binary format."
        },
        {
            "q": "What is a linked list?",
            "a": "A linked list is a dynamic data structure where elements (nodes) are linked using pointers."
        },
        {
            "q": "What are the different types of linked lists?",
            "a": "Singly linked list, doubly linked list, and circular linked list."
        },
        {
            "q": "What is the difference between stack and queue?",
            "a": "Stack follows LIFO (Last In First Out), while Queue follows FIFO (First In First Out)."
        },
        {
            "q": "What is a stack in C?",
            "a": "A stack is a data structure that allows push and pop operations based on LIFO."
        },
        {
            "q": "What is a queue in C?",
            "a": "A queue is a data structure that allows enqueue and dequeue operations based on FIFO."
        },
        {
            "q": "What is a circular queue?",
            "a": "A circular queue is a queue where the last element connects back to the first element."
        },
        {
            "q": "What is a binary tree?",
            "a": "A binary tree is a hierarchical data structure where each node has at most two children."
        },
        {
            "q": "What is the difference between breadth-first and depth-first search?",
            "a": "BFS explores level by level, while DFS explores depth-wise using recursion or a stack."
        },
        {
            "q": "What is a macro in C?",
            "a": "A macro is a preprocessor directive that defines a code substitution before compilation."
        },
        {
            "q": "What is the difference between `#define` and `const`?",
            "a": "`#define` defines a preprocessor macro, while `const` defines a variable that cannot be modified."
        },
        {
            "q": "What is an enumeration in C?",
            "a": "An enumeration (`enum`) is a user-defined data type that assigns names to integer constants."
        },
        {
            "q": "What is the use of `typedef` in C?",
            "a": "`typedef` creates a new name for an existing data type to improve readability."
        },
        {
            "q": "What is a volatile variable in C?",
            "a": "A `volatile` variable tells the compiler that its value can change unexpectedly, preventing optimization."
        },
        {
            "q": "What is a register variable?",
            "a": "A `register` variable is stored in CPU registers instead of RAM for faster access."
        },
        {
            "q": "What is a dangling pointer?",
            "a": "A dangling pointer is a pointer that points to a memory location that has been freed."
        },
        {
            "q": "What is memory leak in C?",
            "a": "A memory leak occurs when dynamically allocated memory is not freed, leading to wastage."
        },
        {
            "q": "What is segmentation fault?",
            "a": "A segmentation fault occurs when a program accesses a restricted memory location."
        },
        {
            "q": "What are the storage classes in C?",
            "a": "`auto`, `static`, `extern`, `register`."
        },
        {
            "q": "What is `static` keyword in C?",
            "a": "`static` makes variables retain their value across function calls."
        },
        {
            "q": "What is `extern` in C?",
            "a": "`extern` is used to declare a global variable or function defined in another file."
        },
        {
            "q": "What is `inline` function in C?",
            "a": "An `inline` function replaces function calls with actual code to optimize performance."
        },
        {
            "q": "What is bitwise operator in C?",
            "a": "Bitwise operators perform operations at the binary level, like AND, OR, XOR, NOT, left shift, right shift."
        },
        {
            "q": "What is a union in C?",
            "a": "A union is a special data type that allows different data types to share the same memory location."
        },
        {
            "q": "What is the difference between `break` and `continue`?",
            "a": "`break` exits a loop, while `continue` skips the current iteration and continues."
        },
        {
            "q": "What is `goto` in C?",
            "a": "`goto` is a statement used for jumping to a labeled statement within a function."
        },
        {
            "q": "What is command-line argument in C?",
            "a": "Command-line arguments allow passing parameters to a program from the terminal using `argc` and `argv`."
        }
    ],

    "technical": [
        {
            "q": "What is Object-Oriented Programming?",
            "a": "Object-Oriented Programming (OOP) is a programming paradigm based on objects and classes."
        },
        {
            "q": "What are the four pillars of OOP?",
            "a": "Encapsulation, Inheritance, Polymorphism, and Abstraction."
        },
        {
            "q": "What is a design pattern?",
            "a": "A design pattern is a reusable solution to a common problem in software design."
        },
        {
            "q": "What is the difference between an abstract class and an interface?",
            "a": "An abstract class can have both abstract and concrete methods, while an interface only contains abstract methods."
        },
        {
            "q": "What is the difference between procedural and object-oriented programming?",
            "a": "Procedural programming follows a step-by-step approach, while object-oriented programming is based on objects and encapsulation."
        },
        {
            "q": "What is a data structure?",
            "a": "A data structure is a way of organizing and storing data to perform operations efficiently."
        },
        {
            "q": "Explain the difference between stack and queue.",
            "a": "A stack follows Last In First Out (LIFO), while a queue follows First In First Out (FIFO)."
        },
        {
            "q": "What is recursion?",
            "a": "Recursion is a process where a function calls itself to solve a smaller instance of the problem."
        },
        {
            "q": "What is the difference between an array and a linked list?",
            "a": "An array is a fixed-size data structure, whereas a linked list consists of nodes connected via pointers."
        },
        {
            "q": "What is Big O notation?",
            "a": "Big O notation describes the worst-case time complexity of an algorithm."
        }
    ],
    "hr": [
        {
            "q": "Tell me about yourself.",
            "a": "I am a dedicated software developer with a passion for problem-solving and technology."
        },
        {
            "q": "Why do you want to work for our company?",
            "a": "I admire your company's innovative culture and commitment to excellence."
        },
        {
            "q": "What are your strengths and weaknesses?",
            "a": "Strength: Problem-solving and adaptability. Weakness: I tend to be a perfectionist."
        },
        {
            "q": "Where do you see yourself in five years?",
            "a": "I see myself growing within the company and taking on more responsibilities in leadership roles."
        },
        {
            "q": "Describe a challenging situation and how you handled it.",
            "a": "In my previous job, I faced a tight deadline for a project. I prioritized tasks and collaborated with my team to complete it successfully."
        },
        {
            "q": "Why should we hire you?",
            "a": "I have the right skills and experience for this role, and I am highly motivated to contribute to the success of the company."
        },
        {
            "q": "How do you handle stress?",
            "a": "I break down my tasks into manageable parts, stay organized, and take short breaks to stay focused."
        },
        {
            "q": "What motivates you at work?",
            "a": "I am motivated by learning new skills, solving challenging problems, and achieving company goals."
        },
        {
            "q": "How do you handle constructive criticism?",
            "a": "I see constructive criticism as an opportunity to improve and grow in my career."
        },
        {
            "q": "What are your salary expectations?",
            "a": "I am open to discussing a competitive salary based on my experience and the role's responsibilities."
        }
    ],
    "aptitude": [
        {
            "q": "If a train travels 60 km/hr for 2 hours, how far does it travel?",
            "a": "The train travels 120 km (Speed × Time = Distance)."
        },
        {
            "q": "Solve: 25 + 75 × 2 - 50.",
            "a": "Answer: 125 (BODMAS rule)."
        },
        {
            "q": "What is the next number in the sequence: 2, 4, 8, 16, __?",
            "a": "Answer: 32 (Pattern: Multiply by 2)."
        },
        {
            "q": "A shopkeeper offers a discount of 20% on an item priced at $200. What is the final price?",
            "a": "Answer: $160 (Discount = 200 × 0.20, Final Price = 200 - 40)."
        },
        {
            "q": "A man walks 3 km north, then 4 km east. What is the shortest distance back to the start?",
            "a": "Answer: 5 km (Using Pythagoras theorem: √(3² + 4²))."
        },
        {
            "q": "If a clock strikes once at 1 o'clock, twice at 2 o'clock, and so on, how many times does it strike in a day?",
            "a": "Answer: 156 times (Sum of strikes for 12 hours × 2)."
        },
        {
            "q": "A car covers 150 km in 3 hours. What is its speed?",
            "a": "Answer: 50 km/hr (Speed = Distance ÷ Time)."
        },
        {
            "q": "Find the missing number: 3, 6, 12, 24, __?",
            "a": "Answer: 48 (Each number is multiplied by 2)."
        },
        {
            "q": "The sum of two numbers is 30, and their difference is 10. Find the numbers.",
            "a": "Answer: 20 and 10 (Solving the equations x + y = 30, x - y = 10)."
        },
        {
            "q": "If 5 people can complete a task in 10 days, how many days will 10 people take?",
            "a": "Answer: 5 days (Work done = Inverse of people ratio)."
        }
    ],
    "business": [
        {
            "q": "What is the purpose of a business plan?",
            "a": "A business plan outlines a company's goals, strategies, and financial projections to ensure success."
        },
        {
            "q": "What are the 4Ps of marketing?",
            "a": "The 4Ps of marketing are Product, Price, Place, and Promotion."
        },
        {
            "q": "What is the difference between revenue and profit?",
            "a": "Revenue is the total income generated by sales, while profit is the amount remaining after expenses are deducted."
        },
        {
            "q": "What is the difference between B2B and B2C marketing?",
            "a": "B2B marketing targets businesses, while B2C marketing targets individual consumers."
        },
        {
            "q": "What is corporate social responsibility (CSR)?",
            "a": "CSR is a company's commitment to ethical practices and social and environmental sustainability."
        },
        {
            "q": "What is financial forecasting?",
            "a": "Financial forecasting estimates future financial outcomes based on historical data and trends."
        },
        {
            "q": "What is the role of a balance sheet in accounting?",
            "a": "A balance sheet provides a snapshot of a company's financial position, listing assets, liabilities, and equity."
        },
        {
            "q": "What is supply chain management?",
            "a": "Supply chain management involves overseeing the flow of goods, services, and information from supplier to consumer."
        },
        {
            "q": "What is risk management in business?",
            "a": "Risk management involves identifying, assessing, and mitigating risks that could impact a business."
        },
        {
            "q": "What is the difference between equity financing and debt financing?",
            "a": "Equity financing involves raising capital by selling shares, while debt financing involves borrowing money."
        }
    ],

    "arts": [
        {
            "q": "What is the significance of art in society?",
            "a": "Art reflects culture, expresses emotions, preserves history, and inspires creativity."
        },
        {
            "q": "How does literature contribute to human understanding?",
            "a": "Literature provides insight into human experiences, emotions, and societal issues across different time periods."
        },
        {
            "q": "What is the difference between modern and contemporary art?",
            "a": "Modern art refers to artistic work from the late 19th to mid-20th century, while contemporary art includes present-day artistic expressions."
        },
        {
            "q": "What are the fundamental elements of visual arts?",
            "a": "Line, shape, color, texture, space, value, and form."
        },
        {
            "q": "Why is cultural heritage important?",
            "a": "Cultural heritage preserves traditions, languages, and history, fostering a sense of identity and continuity."
        },
        {
            "q": "What are the key differences between realism and impressionism?",
            "a": "Realism depicts subjects accurately and in great detail, while impressionism captures light, color, and movement with loose brushstrokes."
        },
        {
            "q": "What role does philosophy play in shaping human thought?",
            "a": "Philosophy explores fundamental questions about existence, ethics, and knowledge, influencing how societies develop."
        },
        {
            "q": "How does history help us understand the present?",
            "a": "History provides context for current events, showing patterns and consequences of past actions."
        },
        {
            "q": "What is the purpose of performing arts?",
            "a": "Performing arts entertain, educate, and express social, cultural, and political messages through music, dance, and theater."
        },
        {
            "q": "How do museums contribute to education?",
            "a": "Museums preserve artifacts and offer interactive learning experiences, making history and culture accessible to the public."
        }
    ],
    "science": [
        {
            "q": "What is the scientific method?",
            "a": "The scientific method is a systematic approach to research involving observation, hypothesis, experimentation, and conclusion."
        },
        {
            "q": "What is the difference between a theory and a hypothesis?",
            "a": "A hypothesis is a testable prediction, while a theory is a well-supported explanation based on evidence."
        },
        {
            "q": "What are the three states of matter?",
            "a": "Solid, liquid, and gas."
        },
        {
            "q": "What is the importance of the periodic table?",
            "a": "The periodic table organizes chemical elements based on their properties and atomic structure."
        },
        {
            "q": "How does photosynthesis work?",
            "a": "Plants convert light energy, carbon dioxide, and water into glucose and oxygen using chlorophyll."
        },
        {
            "q": "What is Newton's First Law of Motion?",
            "a": "An object at rest stays at rest, and an object in motion stays in motion unless acted upon by an external force."
        },
        {
            "q": "What is the difference between mitosis and meiosis?",
            "a": "Mitosis produces identical body cells for growth and repair, while meiosis produces reproductive cells (gametes) with genetic variation."
        },
        {
            "q": "What is the role of DNA in genetics?",
            "a": "DNA carries genetic information that determines an organism’s traits and is passed from parents to offspring."
        },
        {
            "q": "What are renewable and non-renewable energy sources?",
            "a": "Renewable sources (e.g., solar, wind) can be replenished, while non-renewable sources (e.g., coal, oil) are finite."
        },
        {
            "q": "How does climate change affect the environment?",
            "a": "Climate change leads to rising temperatures, melting ice caps, extreme weather, and loss of biodiversity."
        }
    ],
    "engineering": [
        {
            "q": "What are the main branches of engineering?",
            "a": "The main branches include Mechanical, Civil, Electrical, Electronics, Computer, and Chemical Engineering."
        },
        {
            "q": "What is the difference between a beam and a column?",
            "a": "A beam supports loads perpendicular to its length, while a column carries axial loads along its length."
        },
        {
            "q": "What is Ohm's Law?",
            "a": "Ohm's Law states that Voltage (V) = Current (I) × Resistance (R)."
        },
        {
            "q": "What is the role of a mechanical engineer?",
            "a": "A mechanical engineer designs, develops, and tests mechanical systems, machinery, and engines."
        },
        {
            "q": "What is CAD and why is it important in engineering?",
            "a": "Computer-Aided Design (CAD) is software used for designing and modeling engineering structures and products."
        },
        {
            "q": "What is the difference between AC and DC current?",
            "a": "AC (Alternating Current) changes direction periodically, while DC (Direct Current) flows in one direction."
        },
        {
            "q": "What is the function of a bridge in civil engineering?",
            "a": "A bridge provides passage over obstacles such as rivers, roads, or valleys by supporting loads safely."
        },
        {
            "q": "What are the types of programming languages used in software engineering?",
            "a": "Common types include procedural (C), object-oriented (Java, Python), and functional (Haskell, Scala)."
        },
        {
            "q": "What is the role of thermodynamics in engineering?",
            "a": "Thermodynamics studies heat, energy, and work interactions in mechanical and chemical systems."
        },
        {
            "q": "What is a microcontroller and where is it used?",
            "a": "A microcontroller is a small computer on a chip used in embedded systems like appliances and automotive controls."
        }
    ],
    "nontech": [
        {
            "q": "What are the key skills required for a non-technical role?",
            "a": "Communication, teamwork, problem-solving, adaptability, and leadership skills are crucial for non-technical roles."
        },
        {
            "q": "How do you handle conflicts in a team?",
            "a": "I address conflicts by actively listening to all parties, understanding their perspectives, and working toward a mutually beneficial solution."
        },
        {
            "q": "Why is emotional intelligence important in the workplace?",
            "a": "Emotional intelligence helps in understanding and managing emotions, improving communication, and fostering positive work relationships."
        },
        {
            "q": "How do you prioritize tasks when handling multiple projects?",
            "a": "I use prioritization techniques like the Eisenhower Matrix, deadlines, and urgency vs. importance analysis."
        },
        {
            "q": "Can you give an example of how you have demonstrated leadership in the past?",
            "a": "I led a team project where I coordinated tasks, motivated team members, and ensured successful completion within the deadline."
        },
        {
            "q": "What strategies do you use to stay organized in a fast-paced work environment?",
            "a": "I use tools like to-do lists, calendars, and task management apps to keep track of deadlines and responsibilities."
        },
        {
            "q": "How would you handle criticism from a colleague or supervisor?",
            "a": "I would take it constructively, analyze the feedback, and use it to improve my performance without taking it personally."
        },
        {
            "q": "What are the key components of effective communication?",
            "a": "Clarity, active listening, empathy, conciseness, and adapting communication style to the audience."
        },
        {
            "q": "How do you handle stressful situations in the workplace?",
            "a": "I stay calm, break down tasks into manageable steps, prioritize my workload, and practice stress-relief techniques like deep breathing."
        },
        {
            "q": "Why do you think teamwork is essential in a workplace?",
            "a": "Teamwork fosters collaboration, enhances problem-solving, improves efficiency, and helps achieve common goals effectively."
        }
    ],

    "beginner": [
        {
            "question": "What is the output of 2 + '2' in JavaScript?",
            "options": [ "4", "'22'", "Error", "NaN" ],
            "correct": "'22'"
        },
        {
            "question": "Which keyword is used to declare a constant variable?",
            "options": [ "var", "let", "const", "final" ],
            "correct": "const"
        },
        {
            "question": "Which of the following is a JavaScript data type?",
            "options": [ "String", "Boolean", "Number", "All of the above" ],
            "correct": "All of the above"
        },
        {
            "question": "What is the correct syntax to write 'Hello World' in an alert box?",
            "options": [
                "msgBox('Hello World');",
                "alert('Hello World');",
                "msg('Hello World');",
                "console.log('Hello World');"
            ],
            "correct": "alert('Hello World');"
        },
        {
            "question": "Which symbol is used for single-line comments in JavaScript?",
            "options": [ "//", "/*", "#", "--" ],
            "correct": "//"
        },
        {
            "question": "Which function is used to parse a string into an integer?",
            "options": [ "parseInt()", "parseFloat()", "Number()", "toFixed()" ],
            "correct": "parseInt()"
        },
        {
            "question": "Which operator is used for strict equality comparison?",
            "options": [ "==", "===", "!=", "!==" ],
            "correct": "==="
        },
        {
            "question": "How do you declare an array in JavaScript?",
            "options": [
                "var colors = 'red', 'blue', 'green';",
                "var colors = ['red', 'blue', 'green'];",
                "var colors = (red, blue, green);",
                "var colors = {red, blue, green};"
            ],
            "correct": "var colors = ['red', 'blue', 'green'];"
        },
        {
            "question": "Which built-in method removes the last element from an array?",
            "options": [ "shift()", "pop()", "splice()", "slice()" ],
            "correct": "pop()"
        },
        {
            "question": "What does `typeof null` return?",
            "options": [ "'null'", "'object'", "'undefined'", "'number'" ],
            "correct": "'object'"
        },
        {
            "question": "What is the result of `true + false` in JavaScript?",
            "options": [ "true", "false", "1", "0" ],
            "correct": "1"
        },
        {
            "question": "Which function is used to print something to the console?",
            "options": [ "print()", "console.log()", "log()", "write()" ],
            "correct": "console.log()"
        },
        {
            "question": "Which keyword is used to define a JavaScript function?",
            "options": [ "def", "function", "fun", "define" ],
            "correct": "function"
        },
        {
            "question": "What does `NaN` stand for?",
            "options": [ "Not a Number", "No assigned Name", "Null and None", "New Array Number" ],
            "correct": "Not a Number"
        },
        {
            "question": "How do you write an IF statement in JavaScript?",
            "options": [
                "if i = 5 then",
                "if i == 5",
                "if (i == 5)",
                "if i = 5"
            ],
            "correct": "if (i == 5)"
        },
        {
            "question": "What will `Boolean('false')` return?",
            "options": [ "true", "false", "null", "undefined" ],
            "correct": "true"
        },
        {
            "question": "Which method can be used to convert a string to lowercase?",
            "options": [ "toLower()", "changeCase('lower')", "toLowerCase()", "toSmallCase()" ],
            "correct": "toLowerCase()"
        },
        {
            "question": "How can you add an element to the end of an array?",
            "options": [ "push()", "add()", "append()", "insert()" ],
            "correct": "push()"
        },
        {
            "question": "What does the `setTimeout()` function do?",
            "options": [
                "Executes a function after a delay",
                "Stops execution of a function",
                "Executes a function repeatedly",
                "Delays script loading"
            ],
            "correct": "Executes a function after a delay"
        },
        {
            "question": "Which event is triggered when a user clicks on an element?",
            "options": [ "onchange", "onmouseover", "onclick", "onload" ],
            "correct": "onclick"
        }
    ],
    "intermediate": [
        {
            "question": "Which method is used to remove the last element from an array?",
            "options": [ "shift()", "pop()", "splice()", "remove()" ],
            "correct": "pop()"
        },
        {
            "question": "What does JSON stand for?",
            "options": [
                "JavaScript Object Notation",
                "Java Serialized Object Notation",
                "JavaScript Oriented Network",
                "None of the above"
            ],
            "correct": "JavaScript Object Notation"
        },
        {
            "question": "Which function is used to convert a string into an integer?",
            "options": [ "parseInt()", "toString()", "parseFloat()", "Number()" ],
            "correct": "parseInt()"
        },
        {
            "question": "Which operator is used for strict comparison in JavaScript?",
            "options": [ "==", "===", "!=", "!==" ],
            "correct": "==="
        },
        {
            "question": "Which of the following methods is used to add a new element to an array?",
            "options": [ "push()", "unshift()", "concat()", "All of the above" ],
            "correct": "All of the above"
        },
        {
            "question": "What is the output of `typeof NaN`?",
            "options": [ "'NaN'", "'number'", "'undefined'", "'object'" ],
            "correct": "'number'"
        },
        {
            "question": "How do you create an object in JavaScript?",
            "options": [
                "var obj = ();",
                "var obj = [];",
                "var obj = {};",
                "var obj = object();"
            ],
            "correct": "var obj = {};"
        },
        {
            "question": "Which of the following is NOT a primitive data type in JavaScript?",
            "options": [ "String", "Boolean", "Object", "Number" ],
            "correct": "Object"
        },
        {
            "question": "What will `console.log(0.1 + 0.2 === 0.3)` return?",
            "options": [ "true", "false", "undefined", "Error" ],
            "correct": "false"
        },
        {
            "question": "Which function is used to schedule a function execution after a delay?",
            "options": [ "setTimeout()", "setInterval()", "requestAnimationFrame()", "delay()" ],
            "correct": "setTimeout()"
        },
        {
            "question": "Which keyword is used to declare a block-scoped variable in JavaScript?",
            "options": [ "var", "let", "const", "Both let and const" ],
            "correct": "Both let and const"
        },
        {
            "question": "What is the purpose of the `this` keyword in JavaScript?",
            "options": [
                "Refers to the current function",
                "Refers to the global object",
                "Refers to the object it belongs to",
                "Refers to the previous object"
            ],
            "correct": "Refers to the object it belongs to"
        },
        {
            "question": "Which of the following is used to handle asynchronous operations in JavaScript?",
            "options": [ "Promises", "Callbacks", "Async/Await", "All of the above" ],
            "correct": "All of the above"
        },
        {
            "question": "What does the `map()` method do in JavaScript?",
            "options": [
                "Modifies the original array",
                "Returns a new array with modified elements",
                "Filters elements from the array",
                "Returns a single value"
            ],
            "correct": "Returns a new array with modified elements"
        },
        {
            "question": "What will `console.log(typeof undefined == typeof NULL);` return?",
            "options": [ "true", "false", "undefined", "NULL" ],
            "correct": "true"
        },
        {
            "question": "Which event is fired when an HTML element loses focus?",
            "options": [ "onchange", "onfocusout", "onblur", "onlostfocus" ],
            "correct": "onblur"
        },
        {
            "question": "Which statement is used to stop a loop in JavaScript?",
            "options": [ "break", "exit", "stop", "return" ],
            "correct": "break"
        },
        {
            "question": "What will `console.log(!!false == false)` return?",
            "options": [ "true", "false", "undefined", "NaN" ],
            "correct": "true"
        },
        {
            "question": "How can you prevent the default action of an event in JavaScript?",
            "options": [ "stopDefault()", "preventDefault()", "return false;", "stopPropagation()" ],
            "correct": "preventDefault()"
        },
        {
            "question": "Which JavaScript feature allows creating reusable code by defining a function?",
            "options": [ "Loops", "Closures", "Recursion", "Functions" ],
            "correct": "Functions"
        }
    ],
    "advanced": [
        {
            "question": "What is the purpose of the 'use strict' directive in JavaScript?",
            "options": [
                "To enable modern ES6 features",
                "To enforce stricter parsing and error handling",
                "To optimize performance",
                "None of the above"
            ],
            "correct": "To enforce stricter parsing and error handling"
        },
        {
            "question": "Which JavaScript function is used to serialize an object into a JSON string?",
            "options": [ "JSON.stringify()", "JSON.parse()", "serialize()", "toJSON()" ],
            "correct": "JSON.stringify()"
        },
        {
            "question": "Which of the following is NOT a JavaScript framework?",
            "options": [ "React", "Angular", "Laravel", "Vue" ],
            "correct": "Laravel"
        },
        {
            "question": "How do you create an async function in JavaScript?",
            "options": [
                "function async myFunc() {}",
                "async function myFunc() {}",
                "function myFunc() async {}",
                "None of the above"
            ],
            "correct": "async function myFunc() {}"
        },
        {
            "question": "Which of the following best describes JavaScript closures?",
            "options": [
                "A function inside another function with access to outer function variables",
                "A function that executes immediately",
                "A way to handle asynchronous programming",
                "None of the above"
            ],
            "correct": "A function inside another function with access to outer function variables"
        },
        {
            "question": "What will be logged to the console?\n```js\nconsole.log([] + []);\n```",
            "options": [ "'undefined'", "'null'", "'0'", "'' (empty string)" ],
            "correct": "'' (empty string)"
        },
        {
            "question": "Which of the following is true about the JavaScript event loop?",
            "options": [
                "It executes synchronous code before handling asynchronous tasks",
                "It blocks the execution of code until the call stack is empty",
                "It processes asynchronous code before synchronous code",
                "It executes only asynchronous callbacks"
            ],
            "correct": "It executes synchronous code before handling asynchronous tasks"
        },
        {
            "question": "What is the purpose of the `super` keyword in JavaScript?",
            "options": [
                "To call a parent class constructor or method",
                "To create a new instance of a class",
                "To define private methods",
                "None of the above"
            ],
            "correct": "To call a parent class constructor or method"
        },
        {
            "question": "What will be the output of the following code?\n```js\nconsole.log(typeof null);\n```",
            "options": [ "'null'", "'undefined'", "'object'", "'number'" ],
            "correct": "'object'"
        },
        {
            "question": "Which method is used to bind `this` to a function permanently?",
            "options": [ "call()", "apply()", "bind()", "setTimeout()" ],
            "correct": "bind()"
        },
        {
            "question": "Which of the following is NOT a valid JavaScript data structure?",
            "options": [ "Map", "Set", "Tuple", "WeakMap" ],
            "correct": "Tuple"
        },
        {
            "question": "What will be the output of the following code?\n```js\nconsole.log(typeof NaN);\n```",
            "options": [ "'NaN'", "'number'", "'undefined'", "'object'" ],
            "correct": "'number'"
        },
        {
            "question": "Which of the following statements about JavaScript promises is true?",
            "options": [
                "A promise can only be resolved once",
                "A promise can be resolved or rejected multiple times",
                "A promise blocks execution until resolved",
                "None of the above"
            ],
            "correct": "A promise can only be resolved once"
        },
        {
            "question": "What is the purpose of the JavaScript `Symbol` type?",
            "options": [
                "To create unique property keys",
                "To replace strings as keys in objects",
                "To define global constants",
                "None of the above"
            ],
            "correct": "To create unique property keys"
        },
        {
            "question": "Which function is used to delay execution of a function but ensures it runs asynchronously?",
            "options": [ "setTimeout()", "setInterval()", "requestAnimationFrame()", "nextTick()" ],
            "correct": "setTimeout()"
        },
        {
            "question": "What will be the output of the following code?\n```js\nconsole.log(1 < 2 < 3);\nconsole.log(3 > 2 > 1);\n```",
            "options": [ "'true', 'true'", "'true', 'false'", "'false', 'true'", "'false', 'false'" ],
            "correct": "'true', 'false'"
        },
        {
            "question": "What is the difference between `let` and `const` in JavaScript?",
            "options": [
                "`let` variables can be reassigned, while `const` variables cannot",
                "Both `let` and `const` variables can be reassigned",
                "Both `let` and `const` variables are block-scoped and mutable",
                "None of the above"
            ],
            "correct": "`let` variables can be reassigned, while `const` variables cannot"
        },
        {
            "question": "What will be the output of the following code?\n```js\nconsole.log('5' - 3);\n```",
            "options": [ "'2'", "'53'", "'NaN'", "'undefined'" ],
            "correct": "'2'"
        },
        {
            "question": "Which method is used to create a shallow copy of an object?",
            "options": [ "Object.assign()", "Object.create()", "JSON.stringify()", "Object.copy()" ],
            "correct": "Object.assign()"
        },
        {
            "question": "Which of the following is NOT a valid way to define a function in JavaScript?",
            "options": [
                "function myFunc() {}",
                "const myFunc = () => {}",
                "const myFunc = function() {}",
                "const myFunc = new Function('return 5;')"
            ],
            "correct": "None of the above"
        }
    ]









}


    
    






